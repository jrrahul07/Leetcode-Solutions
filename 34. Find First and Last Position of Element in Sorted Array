Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

Solution:

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* searchRange(int* nums, int numsSize, int target, int* returnSize){
int *ans=(int*)malloc(2*sizeof(int));
   ans[0]=-1;
   ans[1]=-1;
   int l=0;
   int h=numsSize-1;
   int mid;
   while(l<=h)
   {
      mid=(l+h)/2;
       if(target==nums[mid])
       {
          ans[0]=mid;
          h=mid-1;
       }
       else if(target<nums[mid])h=mid-1;
       else l=mid+1;
   }
   l=0;
   h=numsSize-1;
   while(l<=h)
   {
       int mid=(l+h)/2;
       if(target==nums[mid])
       {
          ans[1]=mid;
          l=mid+1;
       }  
       if(target<nums[mid])h=mid-1;
       else l=mid+1;
   }
   *returnSize=2;
    return ans;
}
